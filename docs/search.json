[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "week1_1.html",
    "href": "week1_1.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Before getting started we will need to install R and RStudio.\n\n\nWe can download R from CRAN, the comprehensive R archive network. CRAN is a server used to distribute R and R packages. If you don’t have R installed already you can do so here.\n\n\n\nWith R installed, let’s go ahead and install RStudio. RStudio is a convenient IDE (integrated development environment) for R programming. Download and install the RStudio Desktop client.\n\n\n\nFrom the RStudio Education page:\n\nFor beginner-friendly installation instructions, we recommend the free online ModernDive chapter Getting Started with R and RStudio. You may also enjoy the Basic Basics lesson unit from R-Ladies Sydney, which provides an opinionated tour of RStudio for new users and a step-by-step guide to installing and using R packages.\n\n\n\n\nFor those of you who may be unfamiliar with using an IDE, RStudio is simply a convenient way for us to interact with R. You can think of R as the engine, powering the car, and RStudio as the controls and dashboard for driving. For 559, we won’t interact directly with R very often, instead we will work with R directly from RStudio.\n\n\n\nImage from https://moderndive.com/1-getting-started.html\n\n\n\n\n\nAfter opening RStudio you will see something similar to the image below, where the application is divided into different panes. Each pane serves a different purpose:\n\nQ1: contains scripts you are working from and sometimes data views\nQ2: the console where you run the code\nQ3: the environment page, code history, and build tools\nQ4: files, plots, packages, help documentation\n\n\n\n\nImage from https://rladiessydney.org/courses/01-basicbasics-1\n\n\n\n\n\nLet’s begin by using the Console to interact with R.\n\n\nWe can use R as a basic calculator.\n\n1 / 200 * 30\n#&gt; [1] 0.15\n(59 + 73 + 2) / 3\n#&gt; [1] 44.66667\nsin(pi / 2)\n#&gt; [1] 1\n\n\n\n\nWe can create new object using the assignment operator &lt;- as follows:\n\nx &lt;- 3 * 4\nsecret_password &lt;- \"password1234\"\n\nIn R, object names are case sensitive, must start with a letter and can contain numbers, letters, underscores and periods.\nYou can look at objects by typing their name into the console:\n\nx\n\n[1] 12\n\n\n\nsecret_password\n\n[1] \"password1234\"\n\n\nIf you type an object that hasn’t been defined yet you will get an error. For example,\n\nSecret_Password\n\nError: object 'Secret_Password' not found\n\n\n\n\n\nR has many built-in functions and you can also create your own. Functions can be used to perform tasks in R. They take arguments as inputs, and return outputs. Often you will supply arguments to a function, and it is also possible to use a function’s default values.\nFor example, there is a function in R called seq(from, to) that creates a sequence of numbers starting at from and ending at to. For example, if we want a sequences of numbers from = 10 all the way to = 20:\n\n# you can add comments to your code using the # key\n# anything after the # will not be run as code\n# note the code below is equivalent to seq(10, 20)\n\nseq(from = 10, to = 20) \n\n [1] 10 11 12 13 14 15 16 17 18 19 20\n\n\nIf you want to better understand what a specific function in R does you can always look to the documentation by typing a question mark before the function name in the R console, for example ?seq or ?rep.\n\n\n\nIt is good practice to add comments to your code. These comments can help others understand what you are doing, and more importantly, they will help you remember what you did. How to effectively use comments is part of a larger discussion on how to write effective and understandable code, and if you’re interested take a look at different style guides for R.\n\n# you can add comments to your code using the # key \n# anything after the # will not be run as code \n#\n# note: the code below is equivalent to seq(10, 20)\n\nseq(from = 10, to = 20)\n\n [1] 10 11 12 13 14 15 16 17 18 19 20",
    "crumbs": [
      "Foundations of ML",
      "Introduction to R"
    ]
  },
  {
    "objectID": "week1_1.html#setting-up-your-environment",
    "href": "week1_1.html#setting-up-your-environment",
    "title": "Introduction to R",
    "section": "",
    "text": "Before getting started we will need to install R and RStudio.\n\n\nWe can download R from CRAN, the comprehensive R archive network. CRAN is a server used to distribute R and R packages. If you don’t have R installed already you can do so here.\n\n\n\nWith R installed, let’s go ahead and install RStudio. RStudio is a convenient IDE (integrated development environment) for R programming. Download and install the RStudio Desktop client.\n\n\n\nFrom the RStudio Education page:\n\nFor beginner-friendly installation instructions, we recommend the free online ModernDive chapter Getting Started with R and RStudio. You may also enjoy the Basic Basics lesson unit from R-Ladies Sydney, which provides an opinionated tour of RStudio for new users and a step-by-step guide to installing and using R packages.\n\n\n\n\nFor those of you who may be unfamiliar with using an IDE, RStudio is simply a convenient way for us to interact with R. You can think of R as the engine, powering the car, and RStudio as the controls and dashboard for driving. For 559, we won’t interact directly with R very often, instead we will work with R directly from RStudio.\n\n\n\nImage from https://moderndive.com/1-getting-started.html\n\n\n\n\n\nAfter opening RStudio you will see something similar to the image below, where the application is divided into different panes. Each pane serves a different purpose:\n\nQ1: contains scripts you are working from and sometimes data views\nQ2: the console where you run the code\nQ3: the environment page, code history, and build tools\nQ4: files, plots, packages, help documentation\n\n\n\n\nImage from https://rladiessydney.org/courses/01-basicbasics-1\n\n\n\n\n\nLet’s begin by using the Console to interact with R.\n\n\nWe can use R as a basic calculator.\n\n1 / 200 * 30\n#&gt; [1] 0.15\n(59 + 73 + 2) / 3\n#&gt; [1] 44.66667\nsin(pi / 2)\n#&gt; [1] 1\n\n\n\n\nWe can create new object using the assignment operator &lt;- as follows:\n\nx &lt;- 3 * 4\nsecret_password &lt;- \"password1234\"\n\nIn R, object names are case sensitive, must start with a letter and can contain numbers, letters, underscores and periods.\nYou can look at objects by typing their name into the console:\n\nx\n\n[1] 12\n\n\n\nsecret_password\n\n[1] \"password1234\"\n\n\nIf you type an object that hasn’t been defined yet you will get an error. For example,\n\nSecret_Password\n\nError: object 'Secret_Password' not found\n\n\n\n\n\nR has many built-in functions and you can also create your own. Functions can be used to perform tasks in R. They take arguments as inputs, and return outputs. Often you will supply arguments to a function, and it is also possible to use a function’s default values.\nFor example, there is a function in R called seq(from, to) that creates a sequence of numbers starting at from and ending at to. For example, if we want a sequences of numbers from = 10 all the way to = 20:\n\n# you can add comments to your code using the # key\n# anything after the # will not be run as code\n# note the code below is equivalent to seq(10, 20)\n\nseq(from = 10, to = 20) \n\n [1] 10 11 12 13 14 15 16 17 18 19 20\n\n\nIf you want to better understand what a specific function in R does you can always look to the documentation by typing a question mark before the function name in the R console, for example ?seq or ?rep.\n\n\n\nIt is good practice to add comments to your code. These comments can help others understand what you are doing, and more importantly, they will help you remember what you did. How to effectively use comments is part of a larger discussion on how to write effective and understandable code, and if you’re interested take a look at different style guides for R.\n\n# you can add comments to your code using the # key \n# anything after the # will not be run as code \n#\n# note: the code below is equivalent to seq(10, 20)\n\nseq(from = 10, to = 20)\n\n [1] 10 11 12 13 14 15 16 17 18 19 20",
    "crumbs": [
      "Foundations of ML",
      "Introduction to R"
    ]
  },
  {
    "objectID": "week1_1.html#example-data",
    "href": "week1_1.html#example-data",
    "title": "Introduction to R",
    "section": "Example Data",
    "text": "Example Data\nToday we will look at the Kaggle Marketing Analytics Data. You can download the raw data here.\n\ndf &lt;- read.csv(\"data/ifood_df.csv\")",
    "crumbs": [
      "Foundations of ML",
      "Introduction to R"
    ]
  },
  {
    "objectID": "week1_1.html#data-splitting-in-r",
    "href": "week1_1.html#data-splitting-in-r",
    "title": "Introduction to R",
    "section": "Data Splitting in R",
    "text": "Data Splitting in R",
    "crumbs": [
      "Foundations of ML",
      "Introduction to R"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PSC559: Applied Machine Learning in Psychology",
    "section": "",
    "text": "Welcome to the Machine Learning seminar!"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "PSYC559: Applied Machine Learning in Psychology",
    "section": "",
    "text": "https://zackfisher.github.io/PSYC559/"
  }
]